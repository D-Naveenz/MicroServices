// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace User_Management.Models;

public partial class middlewaredbContext : DbContext
{
    public middlewaredbContext()
    {
    }

    public middlewaredbContext(DbContextOptions<middlewaredbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Auth> Auth { get; set; }

    public virtual DbSet<Bill> Bill { get; set; }

    public virtual DbSet<Billcustomer> Billcustomer { get; set; }

    public virtual DbSet<Telcoservices> Telcoservices { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Auth>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity.Property(e => e.UserId).IsFixedLength();

            entity.HasOne(d => d.User).WithOne(p => p.Auth).HasConstraintName("fk_auth_user");
        });

        modelBuilder.Entity<Bill>(entity =>
        {
            entity.HasKey(e => e.BillId).HasName("PRIMARY");

            entity.HasMany(d => d.Service).WithMany(p => p.Bill)
                .UsingEntity<Dictionary<string, object>>(
                    "Servicebill",
                    r => r.HasOne<Telcoservices>().WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("service_bill_service"),
                    l => l.HasOne<Bill>().WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("bill_bill_service"),
                    j =>
                    {
                        j.HasKey("BillId", "ServiceId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("servicebill");
                        j.HasIndex(new[] { "ServiceId" }, "service_bill_service_idx");
                        j.IndexerProperty<int>("BillId").HasColumnName("billId");
                        j.IndexerProperty<int>("ServiceId").HasColumnName("serviceId");
                    });
        });

        modelBuilder.Entity<Billcustomer>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.BillId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.Property(e => e.UserId).IsFixedLength();

            entity.HasOne(d => d.Bill).WithMany(p => p.Billcustomer).HasConstraintName("bill_bill_customer");

            entity.HasOne(d => d.User).WithMany(p => p.Billcustomer).HasConstraintName("fk_billcustomer_user");
        });

        modelBuilder.Entity<Telcoservices>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PRIMARY");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity.Property(e => e.UserId).IsFixedLength();

            entity.HasMany(d => d.Service).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "Activatedservices",
                    r => r.HasOne<Telcoservices>().WithMany()
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("service_active_user"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_activatedservices_user"),
                    j =>
                    {
                        j.HasKey("UserId", "ServiceId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("activatedservices");
                        j.HasIndex(new[] { "ServiceId" }, "service_active_user_idx");
                        j.IndexerProperty<byte[]>("UserId")
                            .HasMaxLength(16)
                            .IsFixedLength()
                            .HasColumnName("userId");
                        j.IndexerProperty<int>("ServiceId").HasColumnName("serviceId");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}